package server.utility;

import common.data.Color;
import common.data.Country;
import common.data.Location;
import common.utility.Outputer;
import server.App;
import server.utility.Initializer;

import java.sql.*;

/**
 * A class for handle database.
 */
public class DatabaseHandler {
    // Table names

    public static final String GROUP_TABLE = "study_group";
    public static final String USER_TABLE = "my_user";

    // STUDY_GROUP_TABLE column names
    public static final String GROUP_TABLE_ID_COLUMN = "group_id";
    public static final String GROUP_TABLE_NAME_COLUMN = "group_name";
    public static final String COORDINATES_TABLE_X_COLUMN = "group_x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "group_y";
    public static final String GROUP_TABLE_CREATION_DATE_COLUMN = "creation_date";
    public static final String GROUP_TABLE_STUDENTS_COUNT_COLUMN = "students_count";
    public static final String GROUP_TABLE_EXPELLED_STUDENTS_COLUMN = "expelled_students";
    public static final String GROUP_TABLE_AVERAGE_MARK_COLUMN = "average_mark";
    public static final String GROUP_TABLE_FORM_OF_EDUCATION_COLUMN = "form_of_education";
    public static final String PERSON_TABLE_N_COLUMN = "person_name";
    public static final String GROUP_TABLE_WEIGHT_COLUMN = "weight";
    public static final String GROUP_TABLE_HAIR_COLOR_COLUMN = "hair_color";
    public static final String GROUP_TABLE_NATIONALITY_COLUMN = "nationality";
    public static final String LOCATION_X_TABLE_STUDY_GROUP_ID_COLUMN = "location_x";
    public static final String LOCATION_Y_TABLE_STUDY_GROUP_ID_COLUMN = "location_y";
    public static final String LOCATION_Z_TABLE_STUDY_GROUP_ID_COLUMN = "location_z";
    public static final String LOCATION_N_TABLE_STUDY_GROUP_ID_COLUMN = "location_name";
    public static final String GROUP_TABLE_GROUP_OWNER_COLUMN = "user_id";
    // USER_TABLE column names
    public static final String USER_TABLE_ID_COLUMN = "id";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";



    private final String JDBC_DRIVER = "org.postgresql.Driver";

    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseHandler(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    /**
     * A class for connect to database.
     */
    private void connectToDataBase() {
        try {
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(url, user, password);
            Initializer init = new Initializer(connection);
            init.initialize();
            Outputer.println("Соединение с базой данных установлено.");
            App.logger.info("Соединение с базой данных установлено.");
        } catch (SQLException exception) {
            Outputer.printerror("Произошла ошибка при подключении к базе данных!");
            App.logger.error("Произошла ошибка при подключении к базе данных!");
            App.logger.error(exception.toString()  + "\n" + exception.getMessage() + "\n" + exception.getSQLState() +  "\n" + exception.getErrorCode());
        } catch (ClassNotFoundException exception) {
            Outputer.printerror("Драйвер управления базой данных не найден!"); //TODO: constants
            App.logger.error("Драйвер управления базой данных не найден!");
        }
    }

    /**
     * @param sqlStatement SQL statement to be prepared.
     * @param generateKeys Is keys needed to be generated.
     * @return Prepared statement.
     * @throws SQLException When there's exception inside.
     */
    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            App.logger.info("Подготовлен SQL запрос '" + sqlStatement + "'.");
            return preparedStatement;
        } catch (SQLException exception) {
            App.logger.error(exception.toString());
            if (connection == null) App.logger.error("Соединение с базой данных не установлено!");
            throw new SQLException(exception);
        }
    }

    /**
     * Close prepared statement.
     *
     * @param sqlStatement SQL statement to be closed.
     */
    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
            //App.logger.info("Закрыт SQL запрос '" + sqlStatement + "'.");
        } catch (SQLException exception) {
            //App.logger.error("Произошла ошибка при закрытии SQL запроса '" + sqlStatement + "'.");
        }
    }

    /**
     * Close connection to database.
     */
    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            Outputer.println("Соединение с базой данных разорвано.");
            App.logger.info("Соединение с базой данных разорвано.");
        } catch (SQLException exception) {
            Outputer.printerror("Произошла ошибка при разрыве соединения с базой данных!");
            App.logger.error("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    /**
     * Set commit mode of database.
     */
    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            App.logger.error("Произошла ошибка при установлении режима транзакции базы данных!");
        }
    }

    /**
     * Set normal mode of database.
     */
    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            App.logger.error("Произошла ошибка при установлении нормального режима базы данных!");
        }
    }

    /**
     * Commit database status.
     */
    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            App.logger.error("Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }

    /**
     * Roll back database status.
     */
    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            App.logger.error("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }

    /**
     * Set save point of database.
     */
    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            App.logger.error("Произошла ошибка при сохранении состояния базы данных!");
        }
    }
}