{"ast":null,"code":"import entryAPI from 'api/entryAPI';\nimport { setLoading, logout } from './auth';\nconst SET_ENTRIES = 'web-lab4/table/SET_ENTRIES';\nconst CLEAR_ENTRIES = 'web-lab4/table/CLEAR_ENTRIES';\nconst ADD_ENTRY = 'web-lab4/table/ADD_ENTRY';\nconst initialState = {\n  entries: []\n};\nexport default function tableReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (action.type) {\n    case SET_ENTRIES:\n      return Object.assign({}, state, {\n        entries: action.value\n      });\n    case CLEAR_ENTRIES:\n      return Object.assign({}, state, {\n        entries: []\n      });\n    case ADD_ENTRY:\n      return Object.assign({}, state, {\n        entries: [...state.entries, action.value]\n      });\n    default:\n      return state;\n  }\n}\nexport function setEntries(value) {\n  return {\n    type: SET_ENTRIES,\n    value\n  };\n}\nexport function clearEntries() {\n  return {\n    type: CLEAR_ENTRIES\n  };\n}\nexport function addEntry(value) {\n  return {\n    type: ADD_ENTRY,\n    value\n  };\n}\nexport const getEntries = () => dispatch => {\n  dispatch(setLoading(true));\n  entryAPI.getEntries(JSON.parse(localStorage.getItem('userWl4')).jwt).then(response => {\n    if (response.status === 200) {\n      dispatch(setEntries(response.data));\n    } else {\n      alert(`Непредвиденный ответ ${response.status} от сервера!`);\n    }\n    dispatch(setLoading(false));\n  }).catch(error => {\n    if (error.response.status === 401) {\n      dispatch(logout());\n    } else {\n      alert(`Непредвиденный ответ ${error.response.status} от сервера!`);\n    }\n    dispatch(setLoading(false));\n  });\n  ;\n};","map":{"version":3,"names":["entryAPI","setLoading","logout","SET_ENTRIES","CLEAR_ENTRIES","ADD_ENTRY","initialState","entries","tableReducer","state","action","type","Object","assign","value","setEntries","clearEntries","addEntry","getEntries","dispatch","JSON","parse","localStorage","getItem","jwt","then","response","status","data","alert","catch","error"],"sources":["C:/Users/DmitryCopyright/Desktop/web-lab4/frontend/src/redux/modules/table.js"],"sourcesContent":["import entryAPI from 'api/entryAPI';\nimport { setLoading, logout } from './auth';\n\nconst SET_ENTRIES = 'web-lab4/table/SET_ENTRIES';\nconst CLEAR_ENTRIES = 'web-lab4/table/CLEAR_ENTRIES';\nconst ADD_ENTRY = 'web-lab4/table/ADD_ENTRY';\n\nconst initialState = {\n  entries: []\n};\n\nexport default function tableReducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case SET_ENTRIES:\n      return Object.assign(\n        {},\n        state,\n        {\n          entries: action.value\n        }\n      );\n    case CLEAR_ENTRIES:\n      return Object.assign(\n        {},\n        state,\n        {\n          entries: []\n        }\n      );\n    case ADD_ENTRY:\n      return Object.assign(\n        {},\n        state,\n        {\n          entries: [...state.entries, action.value]\n        }\n      );\n    default:\n      return state;\n  }\n}\n\nexport function setEntries(value) {\n  return { type: SET_ENTRIES, value };\n}\n\nexport function clearEntries() {\n  return { type: CLEAR_ENTRIES };\n}\n\nexport function addEntry(value) {\n  return { type: ADD_ENTRY, value };\n}\n\nexport const getEntries = () => (dispatch) => {\n  dispatch(setLoading(true));\n  entryAPI.getEntries(JSON.parse(localStorage.getItem('userWl4')).jwt)\n    .then(response => {\n      if (response.status === 200) {\n        dispatch(setEntries(response.data));\n      } else {\n        alert(`Непредвиденный ответ ${response.status} от сервера!`);\n      }\n      dispatch(setLoading(false));\n    })\n    .catch(error => {\n      if (error.response.status === 401) {\n        dispatch(logout());\n      } else {\n        alert(`Непредвиденный ответ ${error.response.status} от сервера!`);\n      }\n      dispatch(setLoading(false));\n    });;\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,cAAc;AACnC,SAASC,UAAU,EAAEC,MAAM,QAAQ,QAAQ;AAE3C,MAAMC,WAAW,GAAG,4BAA4B;AAChD,MAAMC,aAAa,GAAG,8BAA8B;AACpD,MAAMC,SAAS,GAAG,0BAA0B;AAE5C,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE;AACX,CAAC;AAED,eAAe,SAASC,YAAY,GAAoC;EAAA,IAAnCC,KAAK,uEAAGH,YAAY;EAAA,IAAEI,MAAM,uEAAG,CAAC,CAAC;EACpE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKR,WAAW;MACd,OAAOS,MAAM,CAACC,MAAM,CAClB,CAAC,CAAC,EACFJ,KAAK,EACL;QACEF,OAAO,EAAEG,MAAM,CAACI;MAClB,CAAC,CACF;IACH,KAAKV,aAAa;MAChB,OAAOQ,MAAM,CAACC,MAAM,CAClB,CAAC,CAAC,EACFJ,KAAK,EACL;QACEF,OAAO,EAAE;MACX,CAAC,CACF;IACH,KAAKF,SAAS;MACZ,OAAOO,MAAM,CAACC,MAAM,CAClB,CAAC,CAAC,EACFJ,KAAK,EACL;QACEF,OAAO,EAAE,CAAC,GAAGE,KAAK,CAACF,OAAO,EAAEG,MAAM,CAACI,KAAK;MAC1C,CAAC,CACF;IACH;MACE,OAAOL,KAAK;EAAC;AAEnB;AAEA,OAAO,SAASM,UAAU,CAACD,KAAK,EAAE;EAChC,OAAO;IAAEH,IAAI,EAAER,WAAW;IAAEW;EAAM,CAAC;AACrC;AAEA,OAAO,SAASE,YAAY,GAAG;EAC7B,OAAO;IAAEL,IAAI,EAAEP;EAAc,CAAC;AAChC;AAEA,OAAO,SAASa,QAAQ,CAACH,KAAK,EAAE;EAC9B,OAAO;IAAEH,IAAI,EAAEN,SAAS;IAAES;EAAM,CAAC;AACnC;AAEA,OAAO,MAAMI,UAAU,GAAG,MAAOC,QAAQ,IAAK;EAC5CA,QAAQ,CAAClB,UAAU,CAAC,IAAI,CAAC,CAAC;EAC1BD,QAAQ,CAACkB,UAAU,CAACE,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CAACC,GAAG,CAAC,CACjEC,IAAI,CAACC,QAAQ,IAAI;IAChB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC3BR,QAAQ,CAACJ,UAAU,CAACW,QAAQ,CAACE,IAAI,CAAC,CAAC;IACrC,CAAC,MAAM;MACLC,KAAK,CAAE,wBAAuBH,QAAQ,CAACC,MAAO,cAAa,CAAC;IAC9D;IACAR,QAAQ,CAAClB,UAAU,CAAC,KAAK,CAAC,CAAC;EAC7B,CAAC,CAAC,CACD6B,KAAK,CAACC,KAAK,IAAI;IACd,IAAIA,KAAK,CAACL,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MACjCR,QAAQ,CAACjB,MAAM,EAAE,CAAC;IACpB,CAAC,MAAM;MACL2B,KAAK,CAAE,wBAAuBE,KAAK,CAACL,QAAQ,CAACC,MAAO,cAAa,CAAC;IACpE;IACAR,QAAQ,CAAClB,UAAU,CAAC,KAAK,CAAC,CAAC;EAC7B,CAAC,CAAC;EAAC;AACP,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}